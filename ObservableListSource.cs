//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.Entity;

// ReSharper disable once CheckNamespace
namespace EmployeeManager.DataBinding
{
    /// <summary>
    ///     This is a collection that is compatible with Windows Forms' data-bound
    ///     controls, as it allows Windows Forms graphical, data-bound presentation
    ///     controls to engage in two-way communications with memory objects. Please
    ///     also derive all your entities' navigation properties from this class by
    ///     modifying the Entities.Context.tt and Entities.tt T4 templates in your
    ///     Data Access Layer.
    /// </summary>
    /// <typeparam name="T">Name of the entity object being wrapped by this collection.</typeparam>
    public class ObservableListSource<T> : ObservableCollection<T>, IListSource
    where T : class
    {
        /// <summary>
        ///     Constructs a new instance of
        ///     <see cref="T:EmployeeManager.DataBinding.ObservableListSource" /> and returns a
        ///     reference to it.
        /// </summary>
        public ObservableListSource() { }
        
        /// <summary>
        ///     Constructs a new instance of
        ///     <see cref="T:EmployeeManager.DataBinding.ObservableListSource" /> and returns a
        ///     reference to it.
        /// </summary>
        /// <param name="collection">
        ///     Enumerable collection of objects of
        ///     <typeparamref name="T" />.
        /// </param>
        public ObservableListSource(IEnumerable<T> collection) : base(collection) { }
        
        /// <summary>
        ///     Gets a value indicating whether the collection is a collection of
        ///     <see cref="T:System.Collections.IList" /> objects.
        /// </summary>
        /// <returns>
        ///     <see langword="true" /> if the collection is a collection of
        ///     <see cref="T:System.Collections.IList" /> objects; otherwise,
        ///     <see langword="false" />.
        /// </returns>
        bool IListSource.ContainsListCollection
        {
            get { return false; }
        }
        
        /// <summary>
        ///     Gets a reference to an instance of this collection that implements the
        ///     <see cref="T:System.ComponentModel.IBindingList" /> interface.
        /// </summary>
        public IBindingList List { get; private set; }
        
        /// <summary>
        ///     Returns an <see cref="T:System.Collections.IList" /> that can be bound
        ///     to a data source from an object that does not implement an
        ///     <see cref="T:System.Collections.IList" /> itself.
        /// </summary>
        /// <returns>
        ///     An <see cref="T:System.Collections.IList" /> that can be bound to a
        ///     data source from the object.
        /// </returns>
        IList IListSource.GetList()
        {
            return List ?? (List = this.ToBindingList());
        }
    }
}
